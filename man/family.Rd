% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_family.R
\name{family}
\alias{family}
\alias{parent}
\alias{children}
\alias{siblings}
\title{Find directories of a family}
\usage{
family(parent, family = getOption("family") \%||\% "^[.]family")

parent(family = getOption("family") \%||\% "^[.]family")

children(family = getOption("family") \%||\% "^[.]family")

siblings(family = getOption("family") \%||\% "^[.]family", self = FALSE)
}
\arguments{
\item{parent}{A string giving a single path to the parent directory. The
children directories should be nested one level under it.}

\item{family}{A regular expression to match the name of the file that defines
the family.}

\item{self}{Include the working directory in the output? Yes: \code{TRUE}; No:
\code{FALSE}.}
}
\value{
A character vector.
}
\description{
Find directories of a family
}
\examples{
library(fs)
library(family)

wd <- getwd()
on.exit(setwd(wd))

parent <- path(tempdir(), "parent")

me <- dir_create(path(parent, "me"))
sister <- dir_create(path(parent, "sister"))
brother <- dir_create(path(parent, "brother"))

# To define the family, say 'smith', add a file '.smith' to each child directory
file_create(path(me, ".smith"))
file_create(path(sister, ".smith"))
file_create(path(brother, ".smith"))

# Other directories will be ignored
neighbour <- dir_create(path(parent, "neighbour"))

dir_tree(parent)

# From anywhere
family::family(parent, family = "^[.]smith$")

# You may use convenient helpers form the parent or a child:

# From the parent
setwd(parent)
family::children("^[.]smith$")

# You may also pass `family` via `options()`
op <- options(family = "^[.]smith$")
on.exit(op, add = TRUE)

family::children()

# From a child
setwd(me)
family::siblings()
family::siblings(self = TRUE)
family::parent()

setwd(wd)
}
